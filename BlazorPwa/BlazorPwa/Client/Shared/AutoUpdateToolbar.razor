@*TODO Blazor Web Assembly PWA Auto Refresh Update Tip 08: Toolbar Blazor Component*@
@using System.Timers;
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@if (NewVersionAvailable || ServerVersion != ClientVersion)
{
    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
      <symbol id="check-circle-fill" fill="currentColor" viewBox="0 0 16 16">
        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
      </symbol>
    </svg>
    <div class="alert alert-success" role="alert">
        <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill"/></svg>
        New version @CurrentVersion is now available. <a href="#" class="alert-link" @onclick="ReloadUpdate">Update Now</a> !
    </div>
}

@code
{
    [CascadingParameter]
    private string ClientVersion { get; set; } = "1.0";
    private string ServerVersion { get; set; } = "";
    private string CurrentVersion { get; set; } = "";

    private bool NewVersionAvailable { get; set; } = false;   
    public CascadingAppStateProvider StateProvider { get; set; }    
    private Timer VersionCheckTimer;

    async Task ReloadUpdate()
    {
        await StateProvider.SaveChangesAsync();
        await JSRuntime.InvokeVoidAsync("ReloadUpdate");
    }

    async Task GetVersion()
    {
        try
        {
            CurrentVersion = await Http.GetStringAsync("GetVersion");
            if (CurrentVersion != ServerVersion)
            {
                NewVersionAvailable = true;
                await InvokeAsync(StateHasChanged);
                VersionCheckTimer.Stop();
                //自動更新
                await JSRuntime.InvokeVoidAsync("AutoUpdate");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("GetVersion has error");
            Console.WriteLine(e.Message);
        }
    }

    void TimerElapsed(object? sender, ElapsedEventArgs e)
    {
        Task.Run(async () => await GetVersion());
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // try/catch because we could be offline.
            ServerVersion = await Http.GetStringAsync("GetVersion");
            if(ClientVersion != ServerVersion)
            {
                //自動更新
                await JSRuntime.InvokeVoidAsync("AutoUpdate");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("OnInitializedAsync has error");
            Console.WriteLine(e.Message);
        }

        //每隔 10 秒檢查一次
        VersionCheckTimer = new Timer(10 * 1000);
        VersionCheckTimer.Elapsed += TimerElapsed;
        VersionCheckTimer.Start();
    }
}